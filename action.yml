name: Spec Prod
author: "Sid Vishnoi"
description: "Build ReSpec/Bikeshed specs, validate output and publish to w3.org or GitHub pages"

branding:
  icon: archive
  color: blue

inputs:
  TOOLCHAIN:
    description: Possible values - 'respec', 'bikeshed'
  SOURCE:
    description: Source file path.
  DESTINATION:
    description: Destination path, relative to repository root.
  BUILD_FAIL_ON:
    description: Exit behaviour on errors.
    default: fatal
  VALIDATE_LINKS:
    description: Validate hyperlinks
    default: false
  VALIDATE_MARKUP:
    description: Validate markup
    default: true
  GH_PAGES_BRANCH:
    description: Provide a branch name to deploy to GitHub pages.
  GH_PAGES_BUILD_OVERRIDE:
    description: Override Bikeshed's metadata or ReSpec's respecConfig for GitHub Pages deployment.
  GH_PAGES_TOKEN:
    description: GitHub Personal access token. Required only if the default GitHub actions token doesn't have enough permissions.
  W3C_ECHIDNA_TOKEN:
    description: Echidna token
  W3C_WG_DECISION_URL:
    description: A URL to the working group decision to use auto-publish (usually from a w3c mailing list).
  W3C_BUILD_OVERRIDE:
    description: Override Bikeshed's metadata or ReSpec's respecConfig for W3C deployment and validations.
  W3C_NOTIFICATIONS_CC:
    description: Comma separated list of email addresses to CC

runs:
  using: composite
  steps:
    - name: Set up action
      run: |
        echo "::group::Set up action"
        yarn --cwd ${{ github.action_path }} --ignore-optional
        yarn --cwd ${{ github.action_path }} build
        echo "::endgroup::"
      shell: bash
      env:
        FORCE_COLOR: true
        PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: 1
    - name: Prepare
      id: prepare
      run: |
        echo "::group::Prepare"
        node --enable-source-maps ${{ github.action_path }}/src/prepare.js
        echo "::endgroup::"
      shell: bash
      env:
        INPUTS_USER: ${{ toJSON(inputs) }}
        INPUTS_GITHUB: ${{ toJSON(github) }}

    - name: Setup toolchain
      run: |
        echo "::group::Setup toolchain"
        node --enable-source-maps ${{ github.action_path }}/src/setup.js
        echo "::endgroup::"
      shell: bash
      env:
        INPUTS_TOOLCHAIN: ${{ fromJson(steps.prepare.outputs.build).toolchain }}

    - name: Generate Static HTML
      id: build
      run: |
        echo "::group::Generate Static HTML"
        node --enable-source-maps ${{ github.action_path }}/src/build.js
        echo "::endgroup::"
      shell: bash
      env:
        INPUTS_BUILD: ${{ toJSON(fromJson(steps.prepare.outputs.build)) }}

    - name: Validate hyperlinks
      run: |
        echo "::group::Validate hyperlinks"
        node --enable-source-maps ${{ github.action_path }}/src/validate-links.js
        echo "::endgroup::"
      shell: bash
      env:
        INPUTS_VALIDATE_LINKS: ${{ fromJson(steps.prepare.outputs.validate).links }}
        OUTPUTS_BUILD: ${{ toJson(fromJson(steps.build.outputs.w3c)) }}

    - name: Validate markup
      run: |
        echo "::group::Validate markup"
        node --enable-source-maps ${{ github.action_path }}/src/validate-markup.js
        echo "::endgroup::"
      shell: bash
      env:
        INPUTS_VALIDATE_MARKUP: ${{ fromJson(steps.prepare.outputs.validate).markup }}
        OUTPUTS_BUILD: ${{ toJson(fromJson(steps.build.outputs.w3c)) }}

    - name: Deploy to GitHub pages
      run: |
        echo "::group::Deploy to GitHub pages"
        node --enable-source-maps ${{ github.action_path }}/src/deploy-gh-pages.js
        echo "::endgroup::"
      shell: bash
      env:
        INPUTS_DEPLOY: ${{ toJson(fromJson(steps.prepare.outputs.deploy).ghPages) }}
        OUTPUT_DIR: ${{ fromJson(steps.build.outputs.gh).root }}

    - name: Deploy to W3C
      run: |
        echo "::group::Deploy to W3C"
        node --enable-source-maps ${{ github.action_path }}/src/deploy-w3c-echidna.js
        echo "::endgroup::"
      shell: bash
      env:
        INPUTS_DEPLOY: ${{ toJson(fromJson(steps.prepare.outputs.deploy).w3c) }}
        OUTPUTS_BUILD: ${{ toJson(fromJson(steps.build.outputs.w3c)) }}
